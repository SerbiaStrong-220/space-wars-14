using Content.Client.SS220.SpaceWars.Party.Systems;
using Content.Shared.SS220.SpaceWars.Party;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Player;

namespace Content.Client.SS220.SpaceWars.Party.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class MainTab : Control
{
    [Dependency] private readonly IPartyManager _partyManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;

    private readonly PartySystem _partySystem = default!;

    private PartyData? _currentParty;

    public MainTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _partySystem = _entityManager.System<PartySystem>();
        Update();
    }

    public void Update()
    {
        UpdatePartyInfo();
        UpdateMembers();
        UpdateButtons();
    }

    public void UpdatePartyInfo()
    {
        _currentParty = _partyManager.CurrentParty;
    }

    public void UpdateMembers()
    {
        MembersContainer.RemoveAllChildren();
        if (_currentParty == null)
            return;

        foreach (var member in _currentParty.Members)
        {
            var isLeader = _currentParty.IsLeader(member);
            var control = GenerateMemberControl(member, isLeader);
            MembersContainer.AddChild(control);
        }
    }

    public void UpdateButtons()
    {
        ButtonContainer.RemoveAllChildren();

        var player = _playerManager.LocalSession;
        if (player == null)
            return;

        if (_currentParty == null)
        {
            ButtonContainer.AddChild(NewCreatePartyButton());
        }
        else if (_currentParty.IsLeader(player.UserId))
        {
            ButtonContainer.AddChild(NewDisbandPartyButton());
        }
        else
        {
            ButtonContainer.AddChild(NewLeavePartyButton());
        }
    }

    public Control GenerateMemberControl(NetUserId member, bool isLeader)
    {
        var label = new Label();
        label.Text = isLeader ? $"Лидер: {member.UserId}" : $"Участник: {member.UserId}";
        return label;
    }

    public Button NewCreatePartyButton()
    {
        var button = new Button();
        button.Text = "Создать пати";
        button.OnPressed += _ =>
        {
            _partyManager.PartyMenuEui?.CreatePartyRequest();
        };
        return button;
    }

    public Button NewDisbandPartyButton()
    {
        var button = new Button();
        button.Text = "Распустить пати";
        button.OnPressed += _ =>
        {
            _partyManager.PartyMenuEui?.DisbandPartyRequest();
        };
        return button;
    }

    public Button NewLeavePartyButton()
    {
        var button = new Button();
        button.Text = "Покинуть пати";
        button.OnPressed += _ =>
        {
            _partyManager.PartyMenuEui?.LeavePartyRequest();
        };
        return button;
    }
}
